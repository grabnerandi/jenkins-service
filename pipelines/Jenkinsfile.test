@Library('dynatrace@master') _

def tagMatchRules = [
  [
    meTypes: [
      [meType: 'SERVICE']
    ],
    tags : [
      [context: 'ENVIRONMENT', key: 'application', value: ''],
      [context: 'CONTEXTLESS', key: 'service', value: ''],
      [context: 'CONTEXTLESS', key: 'environment', value: '']
    ]
  ]
]

pipeline {
  parameters {
    string(name: 'GITHUBORG', defaultValue: '', description: 'The name of the GitHub organization.', trim: true)
    string(name: 'PROJECT', defaultValue: '', description: 'The name of the entire project.', trim: true)
    string(name: 'TESTSTRATEGY', defaultValue: '', description: 'The test strategy for this stage.', trim: true)
    string(name: 'DEPLOYMENTSTRATEGY', defaultValue: '', description: 'The deployment strategy for this stage.', trim: true)
    string(name: 'STAGE', defaultValue: '', description: 'The stage to deploy the service to.', trim: true)
    string(name: 'SERVICE', defaultValue: '', description: 'The name of the service to deploy.', trim: true)
    string(name: 'IMAGE', defaultValue: '', description: 'The image of the new service.', trim: true)
    string(name: 'TAG', defaultValue: '', description: 'The tag of the new service.', trim: true)
    string(name: 'KEPTNCONTEXT', defaultValue: '', description: 'An id used for keptn tracing', trim: true)
    string(name: 'PREVBLUEVERSION', defaultValue: '', description: 'The previous version deployed on blue.', trim: true)
  }
  agent {
    label 'kubegit'
  }
  stages {
    stage('Checkout test driver') {
      steps {
        container('git') {
          withCredentials([usernamePassword(credentialsId: 'git-credentials-acm', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
            sh "rm -rf ${env.SERVICE}"
            sh "git config --global user.email ${env.GITHUB_USER_EMAIL}"
            sh "git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/${env.GITHUBORG}/${env.SERVICE}"
          }
        }
      }
    }
    stage('Run health check') {
      steps {
        container('jmeter') {
          sh "rm -rf HealthCheck_${env.SERVICE}"
          sh "rm -f HealthCheck_${env.SERVICE}_result.tlf"
          sh "rm -f output.txt"

          script {
            def status = executeJMeter ( 
              scriptName: "${env.SERVICE}/jmeter/basiccheck.jmx", 
              resultsDir: "HealthCheck_${env.SERVICE}",
              serverUrl: "${env.SERVICE}.${env.STAGE}", 
              serverPort: 80,
              checkPath: '/health',
              vuCount: 1,
              loopCount: 1,
              LTN: "HealthCheck_${BUILD_NUMBER}",
              funcValidation: true,
              avgRtValidation: 0
            )
            if (status != 0) {
              currentBuild.result = 'FAILED'
              error "Health check in dev failed."
            }
          }
        }
      }
    }
    stage('Run functional check') {
      when {
        expression {
          return env.TESTSTRATEGY ==~ 'functional' 
        }
      }
      steps {
        container('jmeter') {
          sh "rm -rf FuncCheck_${env.SERVICE}"
          sh "rm -f FuncCheck_${env.SERVICE}_result.tlf"
          sh "rm -f output.txt"

          script {
            def status = executeJMeter (
              scriptName: "${env.SERVICE}/jmeter/${env.SERVICE}_load.jmx", 
              resultsDir: "FuncCheck_${env.SERVICE}",
              serverUrl: "${env.SERVICE}.${env.STAGE}", 
              serverPort: 80,
              checkPath: '/health',
              vuCount: 1,
              loopCount: 1,
              LTN: "FuncCheck_${BUILD_NUMBER}",
              funcValidation: true,
              avgRtValidation: 0
            )
            if (status != 0) {
              currentBuild.result = 'FAILED'
              error "Functional check failed."
            }
          }
        }
      }
    }
    stage('Run performance check') {
      when {
        expression {
          return env.TESTSTRATEGY ==~ 'performance' 
        }
      }
      steps {
        script {
          tagMatchRules[0].tags[0].value = "${env.PROJECT}"
          tagMatchRules[0].tags[1].value = "${env.SERVICE}"
          tagMatchRules[0].tags[2].value = "${env.STAGE}"
        }

        recordDynatraceSession (
          envId: 'Dynatrace Tenant',
          testCase: 'performance',
          tagMatchRules: tagMatchRules
        ) {
          container('jmeter') {
            sh "rm -rf PerfCheck_${env.SERVICE}"
            sh "rm -f PerfCheck_${env.SERVICE}_result.tlf"
            sh "rm -f output.txt"

            script {
              def status = executeJMeter (
                scriptName: "${env.SERVICE}/jmeter/${env.SERVICE}_load.jmx", 
                resultsDir: "PerfCheck_${env.SERVICE}",
                serverUrl: "${env.SERVICE}.${env.STAGE}", 
                serverPort: 80,
                checkPath: '/health',
                vuCount: 10,
                loopCount: 10,
                LTN: "PerfCheck_${BUILD_NUMBER}",
                funcValidation: true,
                avgRtValidation: 0
              )
              if (status != 0) {
                currentBuild.result = 'FAILED'
                error "Performance check failed."
              }
            }
          }
        }
      }
    }
  }
  post {
    always {
      container("curl") {
        sendCloudEvent(
          receiver: 'event-broker.keptn.svc.cluster.local/keptn',
          type: 'sh.keptn.events.tests-finished',
          source: 'Jenkins', 
          data: [
            [key: 'githuborg', value: "${env.GITHUBORG}"],
            [key: 'project', value: "${env.PROJECT}"],
            [key: 'teststategy', value: "${env.TESTSTRATEGY}"],
            [key: 'deploymentstrategy', value: "${env.DEPLOYMENTSTRATEGY}"],
            [key: 'stage', value: "${env.STAGE}"],
            [key: 'service', value: "${env.SERVICE}"],
            [key: 'image', value: "${env.IMAGE}"],
            [key: 'tag', value: "${env.TAG}"],
            [key: 'prevblueversion', value: "${env.PREVBLUEVERSION}"],
            [key: 'keptnContext', value: "${env.KEPTNCONTEXT}"]
          ]
        )
      }
    }
  }
}
