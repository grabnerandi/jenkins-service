@Library('dynatrace@master') _

def IMAGE_TAG = 'UNKNOWN'
def PULL_REQUEST = 'UNKNOWN'
def STABLE_TAG = 'UNKNOWN'

pipeline {
  parameters {
    string(name: 'GITHUBORG', defaultValue: '', description: 'The name of the GitHub organization.', trim: true)
    string(name: 'PROJECT', defaultValue: '', description: 'The name of the entire project.', trim: true)
    string(name: 'TESTSTRATEGY', defaultValue: '', description: 'The test strategy for this stage.', trim: true)
    string(name: 'DEPLOYMENTSTRATEGY', defaultValue: '', description: 'The deployment strategy for this stage.', trim: true)
    string(name: 'STAGE', defaultValue: '', description: 'The stage to deploy the service to.', trim: true)
    string(name: 'SERVICE', defaultValue: '', description: 'The name of the service to deploy.', trim: true)
    string(name: 'IMAGE', defaultValue: '', description: 'The image of the new service.', trim: true)
    string(name: 'TAG', defaultValue: '', description: 'The tag of the new service.', trim: true)
    string(name: 'KEPTNCONTEXT', defaultValue: '', description: 'An id used for keptn tracing', trim: true)
    string(name: 'PREVBLUEVERSION', defaultValue: '', description: 'The previous version deployed on blue.', trim: true)
  }
  agent {
    label 'kubegit'
  }
  stages {
    stage('Checkout monspec') {
      when {
        expression {
          return env.TESTSTRATEGY ==~ 'performance' 
        }
      }
      steps {
        container('git') {
          withCredentials([usernamePassword(credentialsId: 'git-credentials-acm', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
            sh "rm -rf ${env.SERVICE}"
            sh "git config --global user.email ${env.GITHUB_USER_EMAIL}"
            sh "git clone https://${GIT_USERNAME}:${GIT_PASSWORD}@github.com/${env.GITHUBORG}/${env.SERVICE}"
            sh "sed -i \"s#ENV_PLACEHOLDER#${env.STAGE}#\" ${env.SERVICE}/monspec/${env.SERVICE}_perfsig.json"
          }
        }
      }
    }
    stage('Evaluate test') {
      when {
        expression {
          return env.TESTSTRATEGY ==~ 'performance' 
        }
      }
      steps {
        perfSigDynatraceReports(
          envId: 'Dynatrace Tenant', 
          nonFunctionalFailure: 1, 
          specFile: "${env.SERVICE}/monspec/${env.SERVICE}_perfsig.json"
        )
      }
    }
  }
  post {
    always {
      container("curl") {
        sendCloudEvent(
          receiver: 'event-broker.keptn.svc.cluster.local/keptn',
          type: 'sh.keptn.events.new-artefact',
          source: 'Jenkins', 
          data: [
            [key: 'githuborg', value: "${env.GITHUBORG}"],
            [key: 'project', value: "${env.PROJECT}"],
            [key: 'teststategy', value: "${env.TESTSTRATEGY}"],
            [key: 'deploymentstrategy', value: "${env.DEPLOYMENTSTRATEGY}"],
            [key: 'stage', value: "${env.STAGE}"],
            [key: 'service', value: "${env.SERVICE}"],
            [key: 'image', value: "${env.IMAGE}"],
            [key: 'tag', value: "${env.TAG}"],
            [key: 'prevblueversion', value: "${env.PREVBLUEVERSION}"],
            [key: 'keptnContext', value: "${env.KEPTNCONTEXT}"]
          ]
        )
      }
    }
  }
}
